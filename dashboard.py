import io
import json

import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# ---------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´
# ---------------------------
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–ë–æ—Ç–∞", page_icon="ü§ñ", layout="wide")

# ---------------------------
# –ê–í–¢–û–ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê (–Ω–∞–ø—Ä. –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥)
# ---------------------------
time_interval = 10
st_autorefresh(interval=time_interval * 1000, key="data_refresh")


# ---------------------------
# –ó–ê–ì–†–£–ó–ö–ê –ò –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
# ---------------------------
def load_data(file_name):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª —Å –ª–æ–≥–∞–º–∏.
    –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —Ñ–∞–π–ª –ª–µ–∂–∏—Ç –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞ –ø–æ–¥ –∏–º–µ–Ω–µ–º logs.json.
    """
    with open(file_name, "r", encoding="utf-8") as file:
        return json.load(file)


def process_data(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç JSON –≤ DataFrame, –¥–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±—Ü—ã:
    - has_chat_history: —Ñ–ª–∞–≥, –µ—Å—Ç—å –ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã
    - response_time: numeric-–∫–æ–ª–æ–Ω–∫–∞ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞
    - conflict_metric: –ø—Ä–∏–º–µ—Ä –∫–∞—Å—Ç–æ–º–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏
    """
    df = pd.DataFrame(data)
    df["has_chat_history"] = df["chat_history"].apply(lambda x: len(x.get("old_questions", [])) > 0)
    df["response_time"] = pd.to_numeric(df["–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"], errors="coerce")

    # –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∞: "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"
    # –ü—Ä–∏–º–µ—Ä —É—Å–ª–æ–≤–∏—è: –µ—Å–ª–∏ –º–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤ (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤) + –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥ => –∫–æ–Ω—Ñ–ª–∏–∫—Ç
    df["conflict_metric"] = df.apply(
        lambda row: 1 if (len(row.get("chat_history", {}).get("old_questions", [])) > 1
                          and row["response_time"] > 3) else 0,
        axis=1
    )
    return df


def download_json(data):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON (–ª–æ–≥–æ–≤).
    """
    json_data = json.dumps(data, indent=4, ensure_ascii=False)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_data,
        file_name="chatbot_logs.json",
        mime="application/json"
    )


# ---------------------------
# –ö–õ–ê–°–° –î–õ–Ø –≠–ö–°–ü–û–†–¢–ê –ì–†–ê–§–ò–ö–û–í (MATPLOTLIB)
# ---------------------------
class Exports:
    @staticmethod
    def export_pie_chart_matplotlib(data, column, title):
        counts = data[column].value_counts()
        if counts.empty:
            return
        fig, ax = plt.subplots()
        ax.pie(counts.values, labels=counts.index, autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        plt.title(title)
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png")
        plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label=f"üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´{title}¬ª (Matplotlib)",
            data=buffer.getvalue(),
            file_name=f"{title}.png",
            mime="image/png"
        )

    @staticmethod
    def export_bar_chart_matplotlib(data, column, title, xlabel, ylabel):
        counts = data[column].value_counts()
        if counts.empty:
            return
        fig, ax = plt.subplots()
        ax.bar(counts.index, counts.values)
        ax.set_title(title)
        ax.set_xlabel(xlabel)
        ax.set_ylabel(ylabel)
        for i, v in enumerate(counts.values):
            ax.text(i, v + 0.1, str(v), ha='center')
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png")
        plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label=f"üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´{title}¬ª (Matplotlib)",
            data=buffer.getvalue(),
            file_name=f"{title}.png",
            mime="image/png"
        )

    @staticmethod
    def export_response_time_by_campus_matplotlib(data):
        if data.empty or "–ö–∞–º–ø—É—Å" not in data.columns or "response_time" not in data.columns:
            return
        group_data = data.groupby("–ö–∞–º–ø—É—Å")["response_time"].mean().reset_index()
        if group_data.empty:
            return
        fig, ax = plt.subplots()
        ax.bar(group_data["–ö–∞–º–ø—É—Å"], group_data["response_time"])
        ax.set_title("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        ax.set_xlabel("–ö–∞–º–ø—É—Å")
        ax.set_ylabel("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)")
        for i, v in enumerate(group_data["response_time"]):
            ax.text(i, v + 0.1, f"{v:.2f}", ha='center')
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png")
        plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º¬ª (Matplotlib)",
            data=buffer.getvalue(),
            file_name="–°—Ä–µ–¥–Ω–µ–µ_–≤—Ä–µ–º—è_–æ—Ç–≤–µ—Ç–∞_–ø–æ_–∫–∞–º–ø—É—Å–∞–º.png",
            mime="image/png"
        )

    @staticmethod
    def export_line_chart_matplotlib(data):
        if data.empty or "response_time" not in data.columns:
            return
        fig, ax = plt.subplots()
        ax.plot(data.index, data["response_time"], marker='o', linestyle='-')
        ax.set_title("–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")
        ax.set_xlabel("–ó–∞–ø—Ä–æ—Å—ã")
        ax.set_ylabel("–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)")
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png")
        plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏¬ª (Matplotlib)",
            data=buffer.getvalue(),
            file_name="–î–∏–Ω–∞–º–∏–∫–∞_–≤—Ä–µ–º–µ–Ω–∏_–æ—Ç–≤–µ—Ç–∞_–º–æ–¥–µ–ª–∏.png",
            mime="image/png"
        )

    @staticmethod
    def export_conflict_metric_matplotlib(data):
        if data.empty or "conflict_metric" not in data.columns:
            return
        conflict_rate = data["conflict_metric"].mean() * 100
        fig, ax = plt.subplots()
        ax.bar(["–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç"], [conflict_rate], color="red")
        ax.set_ylim(0, 100)
        ax.set_ylabel("–ü—Ä–æ—Ü–µ–Ω—Ç")
        ax.set_title("–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)")
        buffer = io.BytesIO()
        plt.savefig(buffer, format="png")
        plt.close(fig)
        buffer.seek(0)
        st.download_button(
            label="üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)¬ª (Matplotlib)",
            data=buffer.getvalue(),
            file_name="–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π_–æ—Ç–≤–µ—Ç.png",
            mime="image/png"
        )


# ---------------------------
# –ö–õ–ê–°–° –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í (PLOTLY) + –í–´–ó–û–í –≠–ö–°–ü–û–†–¢–ê
# ---------------------------
class Plots:
    def __init__(self, data):
        self.data = data

    def plot_pie_chart(self, column, title):
        if self.data.empty or self.data[column].dropna().empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        counts = self.data[column].value_counts()
        fig = px.pie(
            names=counts.index,
            values=counts.values,
            title=title,
            hole=0.4,
            color_discrete_sequence=px.colors.sequential.RdBu
        )
        st.plotly_chart(fig)
        Exports.export_pie_chart_matplotlib(self.data, column, title)

    def plot_bar_chart(self, column, title, x_label, y_label):
        if self.data.empty or self.data[column].dropna().empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        counts = self.data[column].value_counts()
        if counts.empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        fig = px.bar(
            x=counts.index,
            y=counts.values,
            labels={'x': x_label, 'y': y_label},
            title=title,
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        st.plotly_chart(fig)
        Exports.export_bar_chart_matplotlib(self.data, column, title, x_label, y_label)

    def plot_response_time_chart_with_campus(self):
        if self.data.empty or "–ö–∞–º–ø—É—Å" not in self.data.columns or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
            return
        group_data = self.data.groupby("–ö–∞–º–ø—É—Å")["response_time"].mean().reset_index()
        if group_data.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
            return
        fig = px.bar(
            group_data,
            x="–ö–∞–º–ø—É—Å",
            y="response_time",
            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º",
            color="–ö–∞–º–ø—É—Å",
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig)
        Exports.export_response_time_by_campus_matplotlib(self.data)

    def plot_response_time_chart_line(self):
        if self.data.empty or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")
            return
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=self.data.index,
            y=self.data["response_time"],
            mode='lines+markers',
            name='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
            marker=dict(size=15, symbol='circle', color='red', line=dict(width=2, color='black')),
            line=dict(width=2, color='yellow')
        ))
        fig.update_layout(
            title="–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏",
            xaxis_title="–ó–∞–ø—Ä–æ—Å—ã",
            yaxis_title="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)",
            hovermode="x unified"
        )
        st.plotly_chart(fig)
        Exports.export_line_chart_matplotlib(self.data)

    def plot_follow_up_pie_chart(self):
        if self.data.empty or "has_chat_history" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        follow_ups = self.data["has_chat_history"].mean()
        fig = px.pie(
            names=["–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π", "–° —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏"],
            values=[1 - follow_ups, follow_ups],
            title="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            hole=0.3,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        st.plotly_chart(fig)
        Exports.export_pie_chart_matplotlib(self.data, "has_chat_history", "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def plot_conflict_metric(self):
        if self.data.empty or "conflict_metric" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            return
        conflict_rate = self.data["conflict_metric"].mean() * 100
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=conflict_rate,
            title={"text": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "red"},
                'steps': [
                    {'range': [0, 50], 'color': "lightgreen"},
                    {'range': [50, 100], 'color': "lightcoral"}
                ],
            }
        ))
        st.plotly_chart(fig)
        Exports.export_conflict_metric_matplotlib(self.data)


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò (–ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨)
# ---------------------------
def sidebar_layout(df):
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏:
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫ "–§–∏–ª—å—Ç—Ä—ã"
    - –§–∏–ª—å—Ç—Ä—ã (–∫–∞–º–ø—É—Å, –∫–∞—Ç–µ–≥–æ—Ä–∏—è, —É—Ä–æ–≤–µ–Ω—å)
    - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ "–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö" + –∫–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º.
    """
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    campuses = df["–ö–∞–º–ø—É—Å"].dropna().unique().tolist()
    categories = df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞"].dropna().unique().tolist()
    education_levels = df["–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"].dropna().unique().tolist()

    selected_campus = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å", campuses, default=campuses)
    selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", categories, default=categories)
    selected_edu_level = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education_levels,
                                                default=education_levels)

    # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ JSON
    st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON (–≤—ã–∑—ã–≤–∞–µ—Ç download_json, –∫–æ—Ç–æ—Ä–∞—è –æ–±—ä—è–≤–ª–µ–Ω–∞ –≤—ã—à–µ)
    download_json(df.to_dict(orient="records"))

    filtered_df = df[
        (df["–ö–∞–º–ø—É—Å"].isin(selected_campus)) &
        (df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞"].isin(selected_category)) &
        (df["–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"].isin(selected_edu_level))
        ]
    return filtered_df


# ---------------------------
# –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ---------------------------
def main():
    data = load_data('logs.json')  # –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON
    df = process_data(data)  # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞ (DataFrame + –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    filtered_df = sidebar_layout(df)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º
    if filtered_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∞—Å—Å –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    graphs = Plots(filtered_df)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –¥–∞—à–±–æ—Ä–¥–∞ (–≤ —Ü–µ–Ω—Ç—Ä–µ)
    st.markdown("""
        <h1 style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞</h1>
    """, unsafe_allow_html=True)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_pie_chart("–ö–∞–º–ø—É—Å", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
    with col2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        graphs.plot_pie_chart("–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")

    st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
    graphs.plot_bar_chart("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    col3, col4 = st.columns(2)
    with col3:
        st.subheader("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_response_time_chart_with_campus()
    with col4:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
        graphs.plot_response_time_chart_line()

    st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    graphs.plot_follow_up_pie_chart()

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    graphs.plot_conflict_metric()


if __name__ == "__main__":
    main()
