import io
import json

import matplotlib.pyplot as plt
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from streamlit_autorefresh import st_autorefresh

st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–ë–æ—Ç–∞", page_icon="ü§ñ", layout="wide")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞—à–±–æ—Ä–¥–∞
time_interval = 10
st_autorefresh(interval=time_interval * 1000, key="data_refresh")


def load_data():
    with open("logs.json", "r", encoding="utf-8") as file:
        return json.load(file)


def process_data(data):
    df = pd.DataFrame(data)
    # –§–ª–∞–≥ –Ω–∞–ª–∏—á–∏—è —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    df["has_chat_history"] = df["chat_history"].apply(lambda x: len(x.get("old_questions", [])) > 0)
    df["response_time"] = pd.to_numeric(df["–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"], errors="coerce")
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ—Ç—Ä–∏–∫–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–∏—Ç—É–∞—Ü–∏–∏, –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª—å –≤—ã–¥–∞–µ—Ç ¬´—É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π¬ª –æ—Ç–≤–µ—Ç.
    # –ü—Ä–∏–º–µ—Ä: –µ—Å–ª–∏ –≤ chat_history –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –±–æ–ª—å—à–µ 3 —Å–µ–∫—É–Ω–¥, —Ç–æ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–µ–π.
    df["conflict_metric"] = df.apply(
        lambda row: 1 if (
                    len(row.get("chat_history", {}).get("old_questions", [])) > 1 and row["response_time"] > 3) else 0,
        axis=1
    )
    return df


def download_json(data):
    json_data = json.dumps(data, indent=4, ensure_ascii=False)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_data,
        file_name="chatbot_logs.json",
        mime="application/json"
    )


def download_plot(fig, filename):
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ (Plotly) –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG
    try:
        buffer = io.BytesIO()
        fig.write_image(buffer, format="png")
        buffer.seek(0)
        st.download_button(
            label=f"üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´{filename}¬ª",
            data=buffer.getvalue(),
            file_name=f"{filename}.png",
            mime="image/png"
        )
    except Exception as e:
        st.error("–≠–∫—Å–ø–æ—Ä—Ç –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–∞–∫–µ—Ç kaleido.")


def download_matplotlib_plot(fig, filename):
    buffer = io.BytesIO()
    fig.savefig(buffer, format="png")
    buffer.seek(0)
    st.download_button(
        label=f"üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´{filename}¬ª",
        data=buffer.getvalue(),
        file_name=f"{filename}.png",
        mime="image/png"
    )


def filter_data(df):
    campuses = df["–ö–∞–º–ø—É—Å"].unique().tolist()
    categories = df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞"].unique().tolist()
    education_levels = df["–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"].unique().tolist()

    selected_campus = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å", campuses, default=campuses)
    selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", categories, default=categories)
    selected_edu_level = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education_levels,
                                                default=education_levels)

    filtered_df = df[
        (df["–ö–∞–º–ø—É—Å"].isin(selected_campus)) &
        (df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞"].isin(selected_category)) &
        (df["–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"].isin(selected_edu_level))
        ]
    return filtered_df


class Plots:
    def __init__(self, data):
        self.data = data

    def plot_pie_chart(self, column, title):
        counts = self.data[column].value_counts()
        fig = px.pie(names=counts.index, values=counts.values, title=title, hole=0.4,
                     color_discrete_sequence=px.colors.sequential.RdBu)
        st.plotly_chart(fig)
        download_plot(fig, title)

    def plot_bar_chart(self, column, title, x_label, y_label):
        counts = self.data[column].value_counts()
        fig = px.bar(x=counts.index, y=counts.values, labels={'x': x_label, 'y': y_label},
                     title=title, text_auto=True, color_discrete_sequence=px.colors.qualitative.Vivid)
        st.plotly_chart(fig)
        download_plot(fig, title)

    def plot_response_time_chart_with_campus(self):
        avg_response_time = self.data.groupby("–ö–∞–º–ø—É—Å")["response_time"].mean().reset_index()
        fig = px.bar(avg_response_time, x="–ö–∞–º–ø—É—Å", y="response_time",
                     title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º", color="–ö–∞–º–ø—É—Å", text_auto=True,
                     color_discrete_sequence=px.colors.qualitative.Set3)
        st.plotly_chart(fig)
        download_plot(fig, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")

    def plot_response_time_chart_line(self):
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=self.data.index,
            y=self.data["response_time"],
            mode='lines+markers',
            name='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
            marker=dict(size=8, symbol='circle', color='red', line=dict(width=2, color='black')),
            line=dict(width=2, color='blue')
        ))
        fig.update_layout(
            title="–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏",
            xaxis_title="–ó–∞–ø—Ä–æ—Å—ã",
            yaxis_title="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)",
            hovermode="x unified"
        )
        st.plotly_chart(fig)
        download_plot(fig, "–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")

    def plot_follow_up_pie_chart(self):
        follow_ups = self.data["has_chat_history"].mean()
        fig = px.pie(names=["–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π", "–° —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏"],
                     values=[1 - follow_ups, follow_ups],
                     title="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", hole=0.3,
                     color_discrete_sequence=px.colors.qualitative.Pastel)
        st.plotly_chart(fig)
        download_plot(fig, "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def plot_conflict_metric(self):
        # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –º–µ—Ç—Ä–∏–∫–∏: –ø—Ä–æ—Ü–µ–Ω—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        conflict_rate = self.data["conflict_metric"].mean()
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=conflict_rate * 100,
            title={"text": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "red"},
                'steps': [
                    {'range': [0, 50], 'color': "lightgreen"},
                    {'range': [50, 100], 'color': "lightcoral"}
                ],
            }
        ))
        st.plotly_chart(fig)
        download_plot(fig, "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç")


if __name__ == "__main__":
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã –∏ —ç–∫—Å–ø–æ—Ä—Ç")
    st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    # –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ö–æ–¥–Ω—ã—Ö –ª–æ–≥–æ–≤
    data = load_data()
    download_json(data)

    df = process_data(data)
    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å
    filtered_df = filter_data(df)
    graphs = Plots(filtered_df)

    st.markdown("""
            <h1 style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞</h1>
        """, unsafe_allow_html=True)

    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_pie_chart("–ö–∞–º–ø—É—Å", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
    with col2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        graphs.plot_pie_chart("–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")

    st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
    graphs.plot_bar_chart("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    col3, col4 = st.columns(2)
    with col3:
        st.subheader("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_response_time_chart_with_campus()
    with col4:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
        graphs.plot_response_time_chart_line()

    st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    graphs.plot_follow_up_pie_chart()

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    graphs.plot_conflict_metric()
