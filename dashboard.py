import io
import json

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# ---------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´
# ---------------------------
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–ë–æ—Ç–∞", page_icon="ü§ñ", layout="wide")

# –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
time_interval = 10
st_autorefresh(interval=time_interval * 1000, key="data_refresh")


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
# ---------------------------
def load_data(file_name: str):
    with open(file_name, "r", encoding="utf-8") as file:
        return json.load(file)


# ---------------------------
# –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
# ---------------------------
def process_data(data):
    df = pd.DataFrame(data)

    # –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å "chat_history" - –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ,
    # –∏–Ω–∞—á–µ —Å–º–æ—Ç—Ä–∏–º "contexts", —á—Ç–æ–±—ã –∑–∞–ø–æ–ª–Ω–∏—Ç—å conflict_metric
    if "chat_history" in df.columns:
        df["has_chat_history"] = df["chat_history"].apply(lambda x: len(x.get("old_questions", [])) > 0)
        df["conflict_metric"] = df.apply(
            lambda row: 1 if (len(row.get("chat_history", {}).get("old_questions", [])) > 1
                              and row["response_time"] > 3) else 0,
            axis=1
        )
    elif "contexts" in df.columns:
        df["has_contexts"] = df["contexts"].apply(lambda x: len(x) > 0 if isinstance(x, list) else False)
        df["conflict_metric"] = df.apply(
            lambda row: 1 if (row["has_contexts"] and len(row.get("contexts", [])) > 1
                              and row["response_time"] > 3) else 0,
            axis=1
        )
    else:
        df["conflict_metric"] = 0

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ response_time - —á–∏—Å–ª–æ
    df["response_time"] = pd.to_numeric(df["response_time"], errors="coerce")

    return df


# ---------------------------
# –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• (JSON)
# ---------------------------
def download_json(data):
    json_data = json.dumps(data, indent=4, ensure_ascii=False)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_data,
        file_name="chatbot_logs.json",
        mime="application/json"
    )


# ---------------------------
# –≠–ö–°–ü–û–†–¢ –ì–†–ê–§–ò–ö–û–í –ß–ï–†–ï–ó PLOTLY (KALEIDO)
# ---------------------------
def download_plotly_fig(fig, filename: str):
    try:
        # –ú–µ—Ç–æ–¥ to_image –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Kaleido (—É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ kaleido —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        img_bytes = fig.to_image(format="png")
        st.download_button(
            label=f"üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´{filename}¬ª",
            data=img_bytes,
            file_name=f"{filename}.png",
            mime="image/png"
        )
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ PNG. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω kaleido. –û—à–∏–±–∫–∞: {e}")


# ---------------------------
# –ö–õ–ê–°–° –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í (PLOTLY)
# ---------------------------
class Plots:
    def __init__(self, data: pd.DataFrame):
        self.data = data

    # 1. –ü–∏—Ä–æ–≥: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞–º–ø—É—Å–∞–º/—É—Ä–æ–≤–Ω—è–º –∏ —Ç.–ø.
    def plot_pie_chart(self, column: str, title: str):
        if self.data.empty or self.data[column].dropna().empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        counts = self.data[column].value_counts()
        fig = px.pie(
            names=counts.index,
            values=counts.values,
            title=title,
            hole=0.4,
            color_discrete_sequence=px.colors.sequential.RdBu
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, title)

    # 2. –ë–∞—Ä-—á–∞—Ä—Ç: —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ —Ç.–¥.
    def plot_bar_chart(self, column: str, title: str, x_label: str, y_label: str):
        if self.data.empty or self.data[column].dropna().empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        counts = self.data[column].value_counts()
        if counts.empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        fig = px.bar(
            x=counts.index,
            y=counts.values,
            labels={'x': x_label, 'y': y_label},
            title=title,
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, title)

    # 3. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º
    def plot_response_time_chart_with_campus(self):
        if self.data.empty or "campus" not in self.data.columns or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
            return
        group_data = self.data.groupby("campus")["response_time"].mean().reset_index()
        if group_data.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
            return
        fig = px.bar(
            group_data,
            x="campus",
            y="response_time",
            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º",
            color="campus",
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")

    # 4. –£–°–†–ï–î–ù–ï–ù–ò–ï –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –±–ª–æ–∫–∞–º
    def plot_averaged_response_time_chart(self, bin_size: int = 10):
        if self.data.empty or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—É—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ)")
            return
        df_copy = self.data.copy()
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –±–ª–æ–∫–∞–º (–∫–∞–∂–¥–∞—è –≥—Ä—É–ø–ø–∞ = bin_size –∑–∞–ø—Ä–æ—Å–æ–≤)
        df_copy["group"] = df_copy.index // bin_size
        grouped = df_copy.groupby("group")["response_time"].mean().reset_index()

        fig = px.bar(
            grouped,
            x="group",  # –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
            y="response_time",  # —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞
            title=f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–≥—Ä—É–ø–ø—ã –ø–æ {bin_size} –∑–∞–ø—Ä–æ—Å–æ–≤)",
            labels={
                "group": f"–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–ø–æ {bin_size} –∑–∞–ø—Ä–æ—Å–æ–≤)",
                "response_time": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)"
            }
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, f"–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–≥—Ä—É–ø–ø—ã {bin_size})")

    # 5. –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def plot_follow_up_pie_chart(self):
        if self.data.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        # –ï—Å–ª–∏ –µ—Å—Ç—å chat_history, –∏—Å–ø–æ–ª—å–∑—É–µ–º has_chat_history, –∏–Ω–∞—á–µ has_contexts
        flag = "has_chat_history" if "has_chat_history" in self.data.columns else "has_contexts"
        if flag not in self.data.columns or self.data[flag].dropna().empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
            return
        avg_flag = self.data[flag].mean()
        fig = px.pie(
            names=["–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π", "–° —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏"],
            values=[1 - avg_flag, avg_flag],
            title="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤",
            hole=0.3,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")

    # 6. –ú–µ—Ç—Ä–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–≥–µ–π–¥–∂)
    def plot_conflict_metric(self):
        if self.data.empty or "conflict_metric" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            return
        conflict_rate = self.data["conflict_metric"].mean() * 100

        # –û–¥–Ω–æ—Ç–æ–Ω–Ω–∞—è —à–∫–∞–ª–∞: —É–±–∏—Ä–∞–µ–º steps –∏–ª–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º –æ–¥–∏–Ω —à–∞–≥
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=conflict_rate,
            title={"text": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "red"},  # —Ü–≤–µ—Ç ¬´—Å—Ç—Ä–µ–ª–∫–∏¬ª
                'steps': [
                    {'range': [0, 100], 'color': "lightcoral"}
                ],
            }
        ))
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)")

    # 7. –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫)
    def plot_response_time_by_category(self):
        if self.data.empty or "question_category" not in self.data.columns or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            return
        grouped = self.data.groupby("question_category")["response_time"].mean().reset_index()
        if grouped.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
            return
        fig = px.bar(
            grouped,
            x="question_category",
            y="response_time",
            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤",
            labels={
                "question_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞",
                "response_time": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)"
            },
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")

    # 8. –ë–æ–∫—Å–ø–ª–æ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (–ø—Ä–∏–º–µ—Ä)
    def plot_response_time_boxplot(self):
        if self.data.empty or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ë–æ–∫—Å–ø–ª–æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
            return
        fig = px.box(
            self.data,
            y="response_time",
            title="–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (BoxPlot)",
            color_discrete_sequence=["#FF6666"]
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (BoxPlot)")


# ---------------------------
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–§–ò–õ–¨–¢–†–ê–¶–ò–Ø + –õ–û–ì–û)
# ---------------------------
def sidebar_layout(df: pd.DataFrame):
    # –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–æ—Ç–∏–ø (–º–æ–∂–µ—Ç–µ —É–∫–∞–∑–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª –∏–ª–∏ URL)
    st.sidebar.image(
        "https://raw.githubusercontent.com/streamlit/docs/main/logos/brand/streamlit-logo-primary-colormark-darktext.png",
        use_column_width=True
    )
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    campuses = df["campus"].dropna().unique().tolist() if "campus" in df.columns else []
    categories = df["question_category"].dropna().unique().tolist() if "question_category" in df.columns else []
    education_levels = df["education_level"].dropna().unique().tolist() if "education_level" in df.columns else []

    selected_campus = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å", campuses, default=campuses)
    selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", categories, default=categories)
    selected_edu_level = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education_levels,
                                                default=education_levels)

    st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    download_json(df.to_dict(orient="records"))

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    filtered_df = df.copy()
    if "campus" in df.columns:
        filtered_df = filtered_df[filtered_df["campus"].isin(selected_campus)]
    if "question_category" in df.columns:
        filtered_df = filtered_df[filtered_df["question_category"].isin(selected_category)]
    if "education_level" in df.columns:
        filtered_df = filtered_df[filtered_df["education_level"].isin(selected_edu_level)]

    return filtered_df


# ---------------------------
# –û–°–ù–û–í–ù–ê–Ø –ß–ê–°–¢–¨ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ---------------------------
def main():
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = load_data("output_last.json")  # <-- –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ—ë –∏–º—è —Ñ–∞–π–ª–∞ JSON
    df = process_data(data)

    # 2. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (–ª–æ–≥–æ—Ç–∏–ø + —Ñ–∏–ª—å—Ç—Ä—ã + —ç–∫—Å–ø–æ—Ä—Ç)
    filtered_df = sidebar_layout(df)
    if filtered_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    graphs = Plots(filtered_df)

    # 4. –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("<h1 style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞</h1>", unsafe_allow_html=True)

    # ----------------------------------------
    # –ü–†–ò–ú–ï–† –í–ï–†–°–¢–ö–ò: 1-—è —Å—Ç—Ä–æ–∫–∞ (3 –∫–æ–ª–æ–Ω–∫–∏)
    # ----------------------------------------
    st.markdown("## –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        # –ü–∏—Ä–æ–≥ –ø–æ –∫–∞–º–ø—É—Å–∞–º
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        if "campus" in filtered_df.columns:
            graphs.plot_pie_chart("campus", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'campus'")

    with col2:
        # –ü–∏—Ä–æ–≥ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        if "education_level" in filtered_df.columns:
            graphs.plot_pie_chart("education_level", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'education_level'")

    with col3:
        # –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–∏—Ä–æ–≥)
        st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        graphs.plot_follow_up_pie_chart()

    # ----------------------------------------
    # 2-—è —Å—Ç—Ä–æ–∫–∞ (2 –∫–æ–ª–æ–Ω–∫–∏)
    # ----------------------------------------
    st.markdown("## –°—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
    col4, col5 = st.columns(2)
    with col4:
        st.subheader("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_response_time_chart_with_campus()

    with col5:
        st.subheader("–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        graphs.plot_averaged_response_time_chart(bin_size=10)

    # ----------------------------------------
    # 3-—è —Å—Ç—Ä–æ–∫–∞ (1 –∫–æ–ª–æ–Ω–∫–∞ ‚Äî –æ–¥–Ω–∞ —à–∏—Ä–æ–∫–∞—è)
    # ----------------------------------------
    st.markdown("## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º (–Ω–æ–≤—ã–π –≥—Ä–∞—Ñ–∏–∫)
    st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    graphs.plot_response_time_by_category()

    # –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ (BoxPlot)
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (BoxPlot)")
    graphs.plot_response_time_boxplot()

    # ----------------------------------------
    # –ó–∞–≤–µ—Ä—à–∞—é—â–∏–π –≥—Ä–∞—Ñ–∏–∫: –ì–µ–π–¥–∂ –º–µ—Ç—Ä–∏–∫–∏ ¬´–∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤¬ª
    # ----------------------------------------
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    graphs.plot_conflict_metric()


if __name__ == "__main__":
    main()
