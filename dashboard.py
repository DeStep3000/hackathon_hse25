import json

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# ---------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´ STREAMLIT
# ---------------------------
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã: –∑–∞–≥–æ–ª–æ–≤–æ–∫, –∏–∫–æ–Ω–∫—É –∏ —à–∏—Ä–∏–Ω—É –º–∞–∫–µ—Ç–∞
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–ë–æ—Ç–∞", page_icon="ü§ñ", layout="wide")

# ---------------------------
# CSS-–•–ê–ö –î–õ–Ø –ö–ù–û–ü–û–ö –°–ö–ê–ß–ò–í–ê–ù–ò–Ø
# ---------------------------
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∏–ª—å –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –∑–∞–¥–∞—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —à—Ä–∏—Ñ—Ç
st.markdown("""
<style>
button[data-testid="stDownloadButton"] {
    width: 120px !important;
    height: 35px !important;
    font-size: 12px;
    padding: 0 4px;
    margin-top: 4px;
}
</style>
""", unsafe_allow_html=True)

# ---------------------------
# –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ê–Ø –ü–ï–†–ï–ó–ê–ì–†–£–ó–ö–ê –°–¢–†–ê–ù–ò–¶–´
# ---------------------------
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ (–≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ 10 —Å–µ–∫—É–Ω–¥)
time_interval = 10
st_autorefresh(interval=time_interval * 1000, key="data_refresh")


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
# ---------------------------
def load_data(file_name: str):
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç JSON-—Ñ–∞–π–ª –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ.
    :param file_name: –ò–º—è —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏.
    :return: –î–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Python (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π).
    """
    with open(file_name, "r", encoding="utf-8") as file:
        return json.load(file)


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –î–ê–ù–ù–´–•
# ---------------------------
def process_data(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–∞–Ω–Ω—ã—Ö –≤ DataFrame –∏ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏.
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è:
      - conflict_metric: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —É—Ç–æ—á–Ω—è—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ > 3 —Å–µ–∫)
      - has_chat_history/has_contexts: —Ñ–ª–∞–≥–∏ –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤.
    –¢–∞–∫–∂–µ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É.
    :param data: –°—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ (—Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π).
    :return: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame.
    """
    df = pd.DataFrame(data)

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü chat_history, –≤—ã—á–∏—Å–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
    if "chat_history" in df.columns:
        df["has_chat_history"] = df["chat_history"].apply(lambda x: len(x.get("old_questions", [])) > 0)
        df["conflict_metric"] = df.apply(
            lambda row: 1 if (len(row.get("chat_history", {}).get("old_questions", [])) > 1
                              and row["response_time"] > 3) else 0,
            axis=1
        )
    # –ï—Å–ª–∏ –Ω–µ—Ç chat_history, –Ω–æ –µ—Å—Ç—å contexts, –¥–µ–ª–∞–µ–º –∞–Ω–∞–ª–æ–≥–∏—á–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
    elif "contexts" in df.columns:
        df["has_contexts"] = df["contexts"].apply(lambda x: len(x) > 0 if isinstance(x, list) else False)
        df["conflict_metric"] = df.apply(
            lambda row: 1 if (row["has_contexts"] and len(row.get("contexts", [])) > 1
                              and row["response_time"] > 3) else 0,
            axis=1
        )
    else:
        df["conflict_metric"] = 0

    # –ü—Ä–∏–≤–æ–¥–∏–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –∫ —á–∏—Å–ª–æ–≤–æ–º—É —Ç–∏–ø—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π
    df["response_time"] = pd.to_numeric(df["response_time"], errors="coerce")
    return df


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –°–ö–ê–ß–ò–í–ê–ù–ò–Ø JSON –î–ê–ù–ù–´–•
# ---------------------------
def download_json(data):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç JSON –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    :param data: –î–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    """
    json_data = json.dumps(data, indent=4, ensure_ascii=False, default=str)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_data,
        file_name="chatbot_logs.json",
        mime="application/json"
    )


# ---------------------------
# –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–û–ë–†–ê–ñ–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í
# ---------------------------
def show_plot_with_download_below(fig, filename: str):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≥—Ä–∞—Ñ–∏–∫ Plotly –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–¥ –Ω–∏–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ PNG.
    :param fig: –û–±—ä–µ–∫—Ç –≥—Ä–∞—Ñ–∏–∫–∞ Plotly.
    :param filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.
    """
    st.plotly_chart(fig, use_container_width=True)
    try:
        img_bytes = fig.to_image(format="png")
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
            data=img_bytes,
            file_name=f"{filename}.png",
            mime="image/png"
        )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


# ---------------------------
# –ö–õ–ê–°–° –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í
# ---------------------------
class Plots:
    def __init__(self, data: pd.DataFrame):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤.
        :param data: –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π DataFrame —Å –¥–∞–Ω–Ω—ã–º–∏.
        """
        self.data = data

    # 1. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–∏—Ä–æ–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    def plot_pie_chart(self, column: str, _unused_title: str):
        """
        –°—Ç—Ä–æ–∏—Ç –ø–∏—Ä–æ–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        :param column: –ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.
        :param _unused_title: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏).
        """
        if self.data.empty or column not in self.data.columns or self.data[column].dropna().empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        counts = self.data[column].value_counts()
        fig = px.pie(
            names=counts.index,
            values=counts.values,
            hole=0.4,  # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–æ–≥–æ –ø–∏—Ä–æ–≥–∞
            color_discrete_sequence=px.colors.sequential.RdBu
        )
        show_plot_with_download_below(fig, f"pie_{column}")

    # 2. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    def plot_bar_chart(self, column: str, _unused_title: str, x_label: str, y_label: str):
        """
        –°—Ç—Ä–æ–∏—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞.
        :param column: –ò–º—è —Å—Ç–æ–ª–±—Ü–∞ –¥–ª—è –∞–≥—Ä–µ–≥–∞—Ü–∏–∏.
        :param _unused_title: –ù–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
        :param x_label: –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ X.
        :param y_label: –ü–æ–¥–ø–∏—Å—å –æ—Å–∏ Y.
        """
        if self.data.empty or column not in self.data.columns or self.data[column].dropna().empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        counts = self.data[column].value_counts()
        if counts.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.bar(
            x=counts.index,
            y=counts.values,
            labels={'x': x_label, 'y': y_label},
            text_auto=True,  # –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–∞–¥ —Å—Ç–æ–ª–±—Ü–∞–º–∏
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        show_plot_with_download_below(fig, f"bar_{column}")

    # 3. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º
    def plot_response_time_chart_with_campus(self):
        """
        –°—Ç—Ä–æ–∏—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–º–ø—É—Å–∞.
        """
        if self.data.empty or "campus" not in self.data.columns or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        group_data = self.data.groupby("campus")["response_time"].mean().reset_index()
        if group_data.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.bar(
            group_data,
            x="campus",
            y="response_time",
            color="campus",
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        show_plot_with_download_below(fig, "resp_time_by_campus")

    # 4. –£—Å—Ä–µ–¥–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 10 –∑–∞–ø—Ä–æ—Å–æ–≤)
    def plot_averaged_response_time_chart(self, bin_size: int = 10):
        """
        –°—Ç—Ä–æ–∏—Ç –≥—Ä–∞—Ñ–∏–∫, –ø–æ–∫–∞–∑—ã–≤–∞—é—â–∏–π —É—Å—Ä–µ–¥–Ω–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø –∑–∞–ø—Ä–æ—Å–æ–≤.
        :param bin_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ.
        """
        if self.data.empty or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        df_copy = self.data.copy()
        df_copy["group"] = df_copy.index // bin_size
        grouped = df_copy.groupby("group")["response_time"].mean().reset_index()
        fig = px.bar(
            grouped,
            x="group",
            y="response_time",
            labels={
                "group": f"–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–ø–æ {bin_size} –∑–∞–ø—Ä–æ—Å–æ–≤)",
                "response_time": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)"
            }
        )
        show_plot_with_download_below(fig, "resp_time_averaged")

    # 5. –ü–∏—Ä–æ–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –¥–æ–ª–∏ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def plot_follow_up_pie_chart(self):
        """
        –°—Ç—Ä–æ–∏—Ç –ø–∏—Ä–æ–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é –ø—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Å —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏.
        """
        if self.data.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        # –í—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–≤
        flag = "has_chat_history" if "has_chat_history" in self.data.columns else "has_contexts"
        if flag not in self.data.columns or self.data[flag].dropna().empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        avg_flag = self.data[flag].mean()
        fig = px.pie(
            names=["–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π", "–° —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏"],
            values=[1 - avg_flag, avg_flag],
            hole=0.3,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        show_plot_with_download_below(fig, "follow_up_pie")

    # 6. –ì–µ–π–¥–∂ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    def plot_conflict_metric(self):
        """
        –°—Ç—Ä–æ–∏—Ç –≥–µ–π–¥–∂ (–∏–Ω–¥–∏–∫–∞—Ç–æ—Ä) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è conflict_metric (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö).
        """
        if self.data.empty or "conflict_metric" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        conflict_rate = self.data["conflict_metric"].mean() * 100
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=conflict_rate,
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "red"},
                'steps': [{'range': [0, 100], 'color': "lightcoral"}],
            }
        ))
        show_plot_with_download_below(fig, "conflict_metric")

    # 7. –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤
    def plot_response_time_by_category(self):
        """
        –°—Ç—Ä–æ–∏—Ç —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É, –ø–æ–∫–∞–∑—ã–≤–∞—é—â—É—é —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.
        """
        if self.data.empty or "question_category" not in self.data.columns or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        grouped = self.data.groupby("question_category")["response_time"].mean().reset_index()
        if grouped.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.bar(
            grouped,
            x="question_category",
            y="response_time",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        show_plot_with_download_below(fig, "resp_time_by_category")

    # 8. BoxPlot –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    def plot_response_time_boxplot(self):
        """
        –°—Ç—Ä–æ–∏—Ç boxplot –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞.
        """
        if self.data.empty or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.box(
            self.data,
            y="response_time",
            color_discrete_sequence=["#FF6666"]
        )
        show_plot_with_download_below(fig, "resp_time_boxplot")

    # 9. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
    def plot_quality_metrics_separate(self):
        """
        –°—Ç—Ä–æ–∏—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞:
        - context_recall
        - context_precision
        - answer_correctness_literal
        - answer_correctness_neural
        - Hallucination_metric
        –ì—Ä–∞—Ñ–∏–∫–∏ —Å—Ç—Ä–æ—è—Ç—Å—è –≤ 5 –∫–æ–ª–æ–Ω–∫–∞—Ö.
        """
        needed_cols = [
            "question_category",
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural",
            "Hallucination_metric"
        ]
        for c in needed_cols:
            if c not in self.data.columns:
                return st.info(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{c}' –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.")

        # –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è
        metrics = [
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural",
            "Hallucination_metric"
        ]

        # –°–æ–∑–¥–∞–µ–º 5 –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        cols = st.columns(5)
        for i, metric in enumerate(metrics):
            grouped = self.data.groupby("question_category")[metric].mean().reset_index()
            fig = px.bar(
                grouped,
                x="question_category",
                y=metric,
                labels={
                    "question_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞",
                    metric: "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                },
                title=f"–ú–µ—Ç—Ä–∏–∫–∞: {metric}"
            )
            with cols[i]:
                show_plot_with_download_below(fig, f"separate_{metric}")

    # 10. –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –≤—Å–µ—Ö –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ –Ω–∞ –æ–¥–Ω–æ–º –ø–æ–ª–æ—Ç–Ω–µ
    def plot_quality_metrics_combined(self):
        """
        –°—Ç—Ä–æ–∏—Ç –æ–¥–∏–Ω —Å–≤–æ–¥–Ω—ã–π —Å—Ç–æ–ª–±—á–∞—Ç—ã–π –≥—Ä–∞—Ñ–∏–∫, –≥–¥–µ –≤—Å–µ 5 –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
        (context_recall, context_precision, answer_correctness_literal, answer_correctness_neural, Hallucination_metric)
        –ø—Ä–∏–≤–æ–¥—è—Ç—Å—è –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 100] –∏ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≥—Ä—É–ø–ø–æ–π –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤.
        """
        needed_cols = [
            "question_category",
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural",
            "Hallucination_metric"
        ]
        for c in needed_cols:
            if c not in self.data.columns:
                return st.info(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{c}' –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.")

        metrics = [
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural",
            "Hallucination_metric"
        ]

        # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏
        grouped = self.data.groupby("question_category")[metrics].mean().reset_index()

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∫–∞–∂–¥–æ–π –º–µ—Ç—Ä–∏–∫–∏ –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 100] –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
        for metric in metrics:
            max_val = grouped[metric].max()
            if max_val > 0:
                grouped[metric] = grouped[metric] / max_val * 100

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
        melted = grouped.melt(
            id_vars="question_category",
            value_vars=metrics,
            var_name="metric",
            value_name="mean_value"
        )

        fig = px.bar(
            melted,
            x="question_category",
            y="mean_value",
            color="metric",
            barmode="group",
            labels={
                "question_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞",
                "mean_value": "–°—Ä–µ–¥–Ω–µ–µ (0‚Äì100)",
                "metric": "–ú–µ—Ç—Ä–∏–∫–∞"
            },
            title=""  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –Ω–µ –∑–∞–¥–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–¥–ø–∏—Å—å –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        )
        show_plot_with_download_below(fig, "combined_quality_metrics")


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –°–ê–ô–î–ë–ê–†–ê –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò –î–ê–ù–ù–´–•
# ---------------------------
def sidebar_layout(df: pd.DataFrame):
    """
    –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö.
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å –∫–∞–º–ø—É—Å, –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞ –∏ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–π DataFrame.
    """
    st.sidebar.image(
        "https://github.com/X-D-R/hackathon_hse25/raw/main/logo.png",
        use_container_width=True
    )
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    campuses = df["campus"].dropna().unique().tolist() if "campus" in df.columns else []
    categories = df["question_category"].dropna().unique().tolist() if "question_category" in df.columns else []
    education_levels = df["education_level"].dropna().unique().tolist() if "education_level" in df.columns else []

    selected_campus = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å", campuses, default=campuses)
    selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", categories, default=categories)
    selected_edu_level = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education_levels,
                                                default=education_levels)

    filtered_df = df.copy()
    if "campus" in df.columns:
        filtered_df = filtered_df[filtered_df["campus"].isin(selected_campus)]
    if "question_category" in df.columns:
        filtered_df = filtered_df[filtered_df["question_category"].isin(selected_category)]
    if "education_level" in df.columns:
        filtered_df = filtered_df[filtered_df["education_level"].isin(selected_edu_level)]

    return filtered_df


# ---------------------------
# –ì–õ–ê–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø
# ---------------------------
def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã, –∞ –∑–∞—Ç–µ–º —Å—Ç—Ä–æ–∏—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏:
      - –û—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
      - –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞
      - –ì—Ä–∞—Ñ–∏–∫–∏ –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫ (—Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –∫–∞–º–ø—É—Å–∞–º, —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∏ —Ç.–¥.)
      - –ì—Ä–∞—Ñ–∏–∫–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –≤—Ä–µ–º–µ–Ω–µ–º –æ—Ç–≤–µ—Ç–∞ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ JSON-—Ñ–∞–π–ª–∞
    data = load_data("output_last (1).json")
    df = process_data(data)
    filtered_df = sidebar_layout(df)
    if filtered_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    graphs = Plots(filtered_df)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    st.markdown("<h1 style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞</h1>", unsafe_allow_html=True)

    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
    st.markdown("### –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    download_json(filtered_df.to_dict(orient="records"))

    # --- 1) –û—Ç–¥–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ ---
    st.markdown("## –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    graphs.plot_quality_metrics_separate()

    # --- 2) –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞ ---
    st.markdown("## –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
    graphs.plot_quality_metrics_combined()

    # --- 3) –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
    st.markdown("## –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        if "campus" in filtered_df.columns:
            graphs.plot_pie_chart("campus", "unused_title")
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'campus'")
    with col2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        if "education_level" in filtered_df.columns:
            graphs.plot_pie_chart("education_level", "unused_title")
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'education_level'")
    with col3:
        st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        graphs.plot_follow_up_pie_chart()

    # --- 4) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
    st.markdown("## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    graphs.plot_response_time_by_category()

    # --- 5) –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ –∫–∞–º–ø—É—Å–∞–º –∏ –≥—Ä—É–ø–ø–∞–º) ---
    st.markdown("## –°—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
    col4, col5 = st.columns(2)
    with col4:
        st.subheader("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_response_time_chart_with_campus()
    with col5:
        st.subheader("–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        graphs.plot_averaged_response_time_chart(bin_size=10)

    # --- 6) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ ---
    st.markdown("## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (BoxPlot)")
    graphs.plot_response_time_boxplot()
    st.subheader("–ú–µ—Ç—Ä–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    graphs.plot_conflict_metric()


if __name__ == "__main__":
    main()
