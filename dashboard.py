import json

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# ---------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´
# ---------------------------
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–ë–æ—Ç–∞", page_icon="ü§ñ", layout="wide")

# ---------------------------
# CSS-–•–ê–ö –¥–ª—è –∫–Ω–æ–ø–æ–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
# ---------------------------
st.markdown("""
<style>
button[data-testid="stDownloadButton"] {
    width: 120px !important;
    height: 35px !important;
    font-size: 12px;
    padding: 0 4px;
    margin-top: 4px;
}
</style>
""", unsafe_allow_html=True)

# –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ (–ø–æ –∂–µ–ª–∞–Ω–∏—é)
time_interval = 10
st_autorefresh(interval=time_interval * 1000, key="data_refresh")


def load_data(file_name: str):
    with open(file_name, "r", encoding="utf-8") as file:
        return json.load(file)


def process_data(data):
    df = pd.DataFrame(data)
    # –í—ã—á–∏—Å–ª—è–µ–º conflict_metric
    if "chat_history" in df.columns:
        df["has_chat_history"] = df["chat_history"].apply(lambda x: len(x.get("old_questions", [])) > 0)
        df["conflict_metric"] = df.apply(
            lambda row: 1 if (len(row.get("chat_history", {}).get("old_questions", [])) > 1
                              and row["response_time"] > 3) else 0,
            axis=1
        )
    elif "contexts" in df.columns:
        df["has_contexts"] = df["contexts"].apply(lambda x: len(x) > 0 if isinstance(x, list) else False)
        df["conflict_metric"] = df.apply(
            lambda row: 1 if (row["has_contexts"] and len(row.get("contexts", [])) > 1
                              and row["response_time"] > 3) else 0,
            axis=1
        )
    else:
        df["conflict_metric"] = 0

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ —á–∏—Å–ª–æ
    df["response_time"] = pd.to_numeric(df["response_time"], errors="coerce")
    return df


def download_json(data):
    json_data = json.dumps(data, indent=4, ensure_ascii=False, default=str)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_data,
        file_name="chatbot_logs.json",
        mime="application/json"
    )


# ---------------------------
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π —Å–∫–∞—á–∏–≤–∞–Ω–∏—è, —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–Ω–æ–π –ü–û–î –≥—Ä–∞—Ñ–∏–∫–æ–º
# ---------------------------
def show_plot_with_download_below(fig, filename: str):
    st.plotly_chart(fig, use_container_width=True)
    try:
        img_bytes = fig.to_image(format="png")
        st.download_button(
            label="–°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫",
            data=img_bytes,
            file_name=f"{filename}.png",
            mime="image/png"
        )
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")


# ---------------------------
# –ö–õ–ê–°–° –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í
# ---------------------------
class Plots:
    def __init__(self, data: pd.DataFrame):
        self.data = data

    # –ü–∏—Ä–æ–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    def plot_pie_chart(self, column: str, _unused_title: str):
        if self.data.empty or column not in self.data.columns or self.data[column].dropna().empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        counts = self.data[column].value_counts()
        fig = px.pie(
            names=counts.index,
            values=counts.values,
            hole=0.4,
            color_discrete_sequence=px.colors.sequential.RdBu
        )
        show_plot_with_download_below(fig, f"pie_{column}")

    # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
    def plot_bar_chart(self, column: str, _unused_title: str, x_label: str, y_label: str):
        if self.data.empty or column not in self.data.columns or self.data[column].dropna().empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        counts = self.data[column].value_counts()
        if counts.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.bar(
            x=counts.index,
            y=counts.values,
            labels={'x': x_label, 'y': y_label},
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        show_plot_with_download_below(fig, f"bar_{column}")

    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º
    def plot_response_time_chart_with_campus(self):
        if self.data.empty or "campus" not in self.data.columns or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        group_data = self.data.groupby("campus")["response_time"].mean().reset_index()
        if group_data.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.bar(
            group_data,
            x="campus",
            y="response_time",
            color="campus",
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        show_plot_with_download_below(fig, "resp_time_by_campus")

    # –£–°–†–ï–î–ù–ï–ù–ò–ï –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (–ø–æ –≥—Ä—É–ø–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤)
    def plot_averaged_response_time_chart(self, bin_size: int = 10):
        if self.data.empty or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        df_copy = self.data.copy()
        df_copy["group"] = df_copy.index // bin_size
        grouped = df_copy.groupby("group")["response_time"].mean().reset_index()
        fig = px.bar(
            grouped,
            x="group",
            y="response_time",
            labels={
                "group": f"–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã (–ø–æ {bin_size} –∑–∞–ø—Ä–æ—Å–æ–≤)",
                "response_time": "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)"
            }
        )
        show_plot_with_download_below(fig, "resp_time_averaged")

    # –ü–∏—Ä–æ–≥: –ø—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    def plot_follow_up_pie_chart(self):
        if self.data.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        flag = "has_chat_history" if "has_chat_history" in self.data.columns else "has_contexts"
        if flag not in self.data.columns or self.data[flag].dropna().empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        avg_flag = self.data[flag].mean()
        fig = px.pie(
            names=["–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π", "–° —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏"],
            values=[1 - avg_flag, avg_flag],
            hole=0.3,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        show_plot_with_download_below(fig, "follow_up_pie")

    # –ì–µ–π–¥–∂: –º–µ—Ç—Ä–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
    def plot_conflict_metric(self):
        if self.data.empty or "conflict_metric" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        conflict_rate = self.data["conflict_metric"].mean() * 100
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=conflict_rate,
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "red"},
                'steps': [{'range': [0, 100], 'color': "lightcoral"}],
            }
        ))
        show_plot_with_download_below(fig, "conflict_metric")

    # –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    def plot_response_time_by_category(self):
        if self.data.empty or "question_category" not in self.data.columns or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        grouped = self.data.groupby("question_category")["response_time"].mean().reset_index()
        if grouped.empty:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.bar(
            grouped,
            x="question_category",
            y="response_time",
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        show_plot_with_download_below(fig, "resp_time_by_category")

    # BoxPlot –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
    def plot_response_time_boxplot(self):
        if self.data.empty or "response_time" not in self.data.columns:
            return st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞")
        fig = px.box(
            self.data,
            y="response_time",
            color_discrete_sequence=["#FF6666"]
        )
        show_plot_with_download_below(fig, "resp_time_boxplot")

    # (1) –ß–µ—Ç—ã—Ä–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ (–ø–æ –æ–¥–Ω–æ–π –º–µ—Ç—Ä–∏–∫–µ –Ω–∞ –∫–∞–∂–¥—ã–π)
    def plot_quality_metrics_separate(self):
        needed_cols = [
            "question_category",
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural"
        ]
        for c in needed_cols:
            if c not in self.data.columns:
                return st.info(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{c}' –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.")

        # –°–ø–∏—Å–æ–∫ –º–µ—Ç—Ä–∏–∫
        metrics = [
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural"
        ]

        # –°–æ–∑–¥–∞—ë–º 4 –∫–æ–ª–æ–Ω–∫–∏ –ø–æ–¥ 4 –≥—Ä–∞—Ñ–∏–∫–∞
        cols = st.columns(4)
        for i, metric in enumerate(metrics):
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –≤–æ–ø—Ä–æ—Å–æ–≤
            grouped = self.data.groupby("question_category")[metric].mean().reset_index()

            fig = px.bar(
                grouped,
                x="question_category",
                y=metric,
                labels={
                    "question_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞",
                    metric: "–°—Ä–µ–¥–Ω–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"
                },
                title=f"–ú–µ—Ç—Ä–∏–∫–∞: {metric}"
            )
            with cols[i]:
                show_plot_with_download_below(fig, f"separate_{metric}")

    # (2) –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫, –≥–¥–µ –≤—Å–µ 4 –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ–¥–Ω–æ–º –ø–æ–ª–æ—Ç–Ω–µ (—Å–æ —à–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º 0-100)
    def plot_quality_metrics_combined(self):
        needed_cols = [
            "question_category",
            "context_recall",
            "context_precision",
            "answer_correctness_literal",
            "answer_correctness_neural"
        ]
        for c in needed_cols:
            if c not in self.data.columns:
                return st.info(f"–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ '{c}' –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫.")

        grouped = self.data.groupby("question_category")[
            ["context_recall", "context_precision", "answer_correctness_literal", "answer_correctness_neural"]
        ].mean().reset_index()

        # –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –º–µ—Ç—Ä–∏–∫—É –∫ –¥–∏–∞–ø–∞–∑–æ–Ω—É [0, 100]
        for metric in ["context_recall", "context_precision", "answer_correctness_literal",
                       "answer_correctness_neural"]:
            max_val = grouped[metric].max()
            if max_val > 0:
                grouped[metric] = grouped[metric] / max_val * 100

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –¥–ª–∏–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
        melted = grouped.melt(
            id_vars="question_category",
            value_vars=["context_recall", "context_precision", "answer_correctness_literal",
                        "answer_correctness_neural"],
            var_name="metric",
            value_name="mean_value"
        )

        fig = px.bar(
            melted,
            x="question_category",
            y="mean_value",
            color="metric",
            barmode="group",
            labels={
                "question_category": "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞",
                "mean_value": "–°—Ä–µ–¥–Ω–µ–µ (0‚Äì100)",
                "metric": "–ú–µ—Ç—Ä–∏–∫–∞"
            },
            # –£–±–∏—Ä–∞–µ–º title, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–æ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            title=""
        )
        show_plot_with_download_below(fig, "combined_quality_metrics")


# ---------------------------
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–§–ò–õ–¨–¢–†–ê–¶–ò–Ø + –õ–û–ì–û)
# ---------------------------
def sidebar_layout(df: pd.DataFrame):
    st.sidebar.image(
        "https://github.com/X-D-R/hackathon_hse25/raw/main/logo.png",
        use_container_width=True
    )
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    campuses = df["campus"].dropna().unique().tolist() if "campus" in df.columns else []
    categories = df["question_category"].dropna().unique().tolist() if "question_category" in df.columns else []
    education_levels = df["education_level"].dropna().unique().tolist() if "education_level" in df.columns else []

    selected_campus = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å", campuses, default=campuses)
    selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", categories, default=categories)
    selected_edu_level = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education_levels,
                                                default=education_levels)

    filtered_df = df.copy()
    if "campus" in df.columns:
        filtered_df = filtered_df[filtered_df["campus"].isin(selected_campus)]
    if "question_category" in df.columns:
        filtered_df = filtered_df[filtered_df["question_category"].isin(selected_category)]
    if "education_level" in df.columns:
        filtered_df = filtered_df[filtered_df["education_level"].isin(selected_edu_level)]

    return filtered_df


def main():
    data = load_data("output_last.json")
    df = process_data(data)
    filtered_df = sidebar_layout(df)
    if filtered_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    graphs = Plots(filtered_df)

    st.markdown("<h1 style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞</h1>", unsafe_allow_html=True)

    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
    st.markdown("### –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    download_json(filtered_df.to_dict(orient="records"))

    # --- 1) –ß–µ—Ç—ã—Ä–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–∞ (–∫–∞–∂–¥–∞—è –º–µ—Ç—Ä–∏–∫–∞ –æ—Ç–¥–µ–ª—å–Ω–æ) ---
    st.markdown("## –û—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞")
    graphs.plot_quality_metrics_separate()

    # --- 2) –û–¥–∏–Ω –æ–±—â–∏–π –≥—Ä–∞—Ñ–∏–∫ —Å–æ –≤—Å–µ–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏ (—Å–æ —à–∫–∞–ª–∏—Ä–æ–≤–∞–Ω–∏–µ–º), –±–µ–∑ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–≥–æ—Å—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ ---
    st.markdown("## –°–≤–æ–¥–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –º–µ—Ç—Ä–∏–∫ –∫–∞—á–µ—Å—Ç–≤–∞")
    graphs.plot_quality_metrics_combined()

    # --- 3) –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ ---
    st.markdown("## –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        if "campus" in filtered_df.columns:
            graphs.plot_pie_chart("campus", "unused_title")
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'campus'")

    with col2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        if "education_level" in filtered_df.columns:
            graphs.plot_pie_chart("education_level", "unused_title")
        else:
            st.info("–ù–µ—Ç —Å—Ç–æ–ª–±—Ü–∞ 'education_level'")

    with col3:
        st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
        graphs.plot_follow_up_pie_chart()

    # --- 4) –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º ---
    st.markdown("## –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    graphs.plot_response_time_by_category()

    # --- 5) –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–∫–∞–º–ø—É—Å—ã / –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞) ---
    st.markdown("## –°—Ä–∞–≤–Ω–µ–Ω–∏—è –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
    col4, col5 = st.columns(2)
    with col4:
        st.subheader("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_response_time_chart_with_campus()
    with col5:
        st.subheader("–£—Å—Ä–µ–¥–Ω—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ –≥—Ä—É–ø–ø–∞–º)")
        graphs.plot_averaged_response_time_chart(bin_size=10)

    # --- 6) –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ ---
    st.markdown("## –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏")
    st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ (BoxPlot)")
    graphs.plot_response_time_boxplot()

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    graphs.plot_conflict_metric()


if __name__ == "__main__":
    main()
