import json

import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import streamlit as st
from streamlit_autorefresh import st_autorefresh

# ---------------------------
# –ù–ê–°–¢–†–û–ô–ö–ê –°–¢–†–ê–ù–ò–¶–´
# ---------------------------
st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ß–∞—Ç-–ë–æ—Ç–∞", page_icon="ü§ñ", layout="wide")

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
time_interval = 10
st_autorefresh(interval=time_interval * 1000, key="data_refresh")


# ---------------------------
# –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –î–ê–ù–ù–´–•
# ---------------------------
def load_data(file_name: str):
    with open(file_name, "r", encoding="utf-8") as file:
        return json.load(file)


# ---------------------------
# –ü–†–ï–î–û–ë–†–ê–ë–û–¢–ö–ê –î–ê–ù–ù–´–•
# ---------------------------
def process_data(data):
    df = pd.DataFrame(data)
    df["has_chat_history"] = df["chat_history"].apply(lambda x: len(x.get("old_questions", [])) > 0)
    df["response_time"] = pd.to_numeric(df["–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏"], errors="coerce")

    # –î–æ–ø. –º–µ—Ç—Ä–∏–∫–∞: "—É–±–µ–¥–∏—Ç–µ–ª—å–Ω—ã–π, –Ω–æ –Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç"
    df["conflict_metric"] = df.apply(
        lambda row: 1 if (len(row.get("chat_history", {}).get("old_questions", [])) > 1 and row["response_time"] > 3)
        else 0,
        axis=1
    )
    return df


# ---------------------------
# –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• (JSON)
# ---------------------------
def download_json(data):
    """
    –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏—Å—Ö–æ–¥–Ω–æ–≥–æ JSON (–ª–æ–≥–æ–≤).
    """
    json_data = json.dumps(data, indent=4, ensure_ascii=False)
    st.download_button(
        label="üì• –°–∫–∞—á–∞—Ç—å JSON",
        data=json_data,
        file_name="chatbot_logs.json",
        mime="application/json"
    )


# ---------------------------
# –≠–ö–°–ü–û–†–¢ –ì–†–ê–§–ò–ö–û–í –ß–ï–†–ï–ó PLOTLY (KALEIDO)
# ---------------------------
def download_plotly_fig(fig, filename: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç Plotly-–≥—Ä–∞—Ñ–∏–∫ –≤ PNG —Å –ø–æ–º–æ—â—å—é Kaleido –∏ –¥–∞—ë—Ç –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.
    """
    try:
        img_bytes = fig.to_image(format="png")
        st.download_button(
            label=f"üìä –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ ¬´{filename}¬ª",
            data=img_bytes,
            file_name=f"{filename}.png",
            mime="image/png"
        )
    except Exception as e:
        st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫ –≤ PNG. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ kaleido —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –û—à–∏–±–∫–∞: {e}")


# ---------------------------
# –ö–õ–ê–°–° –î–õ–Ø –ü–û–°–¢–†–û–ï–ù–ò–Ø –ì–†–ê–§–ò–ö–û–í (PLOTLY)
# ---------------------------
class Plots:
    def __init__(self, data: pd.DataFrame):
        self.data = data

    def plot_pie_chart(self, column: str, title: str):
        if self.data.empty or self.data[column].dropna().empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        counts = self.data[column].value_counts()
        fig = px.pie(
            names=counts.index,
            values=counts.values,
            title=title,
            hole=0.4,
            color_discrete_sequence=px.colors.sequential.RdBu
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, title)

    def plot_bar_chart(self, column: str, title: str, x_label: str, y_label: str):
        if self.data.empty or self.data[column].dropna().empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        counts = self.data[column].value_counts()
        if counts.empty:
            st.info(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: {title}")
            return
        fig = px.bar(
            x=counts.index,
            y=counts.values,
            labels={'x': x_label, 'y': y_label},
            title=title,
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Vivid
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, title)

    def plot_response_time_chart_with_campus(self):
        if self.data.empty or "–ö–∞–º–ø—É—Å" not in self.data.columns or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
            return
        group_data = self.data.groupby("–ö–∞–º–ø—É—Å")["response_time"].mean().reset_index()
        if group_data.empty:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
            return
        fig = px.bar(
            group_data,
            x="–ö–∞–º–ø—É—Å",
            y="response_time",
            title="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º",
            color="–ö–∞–º–ø—É—Å",
            text_auto=True,
            color_discrete_sequence=px.colors.qualitative.Set3
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")

    def plot_response_time_chart_line(self):
        if self.data.empty or "response_time" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")
            return
        fig = go.Figure()
        fig.add_trace(go.Scatter(
            x=self.data.index,
            y=self.data["response_time"],
            mode='lines+markers',
            name='–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞',
            marker=dict(size=8, symbol='circle', color='red', line=dict(width=2, color='black')),
            line=dict(width=2, color='blue')
        ))
        fig.update_layout(
            title="–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏",
            xaxis_title="–ó–∞–ø—Ä–æ—Å—ã",
            yaxis_title="–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ (—Å–µ–∫)",
            hovermode="x unified"
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞ –º–æ–¥–µ–ª–∏")

    def plot_follow_up_pie_chart(self):
        if self.data.empty or "has_chat_history" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return
        follow_ups = self.data["has_chat_history"].mean()
        fig = px.pie(
            names=["–ë–µ–∑ —É—Ç–æ—á–Ω–µ–Ω–∏–π", "–° —É—Ç–æ—á–Ω–µ–Ω–∏—è–º–∏"],
            values=[1 - follow_ups, follow_ups],
            title="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
            hole=0.3,
            color_discrete_sequence=px.colors.qualitative.Pastel
        )
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–ü—Ä–æ—Ü–µ–Ω—Ç —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")

    def plot_conflict_metric(self):
        if self.data.empty or "conflict_metric" not in self.data.columns:
            st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞: –ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
            return
        conflict_rate = self.data["conflict_metric"].mean() * 100
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=conflict_rate,
            title={"text": "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)"},
            gauge={
                'axis': {'range': [0, 100]},
                'bar': {'color': "red"},
                'steps': [
                    {'range': [0, 50], 'color': "lightgreen"},
                    {'range': [50, 100], 'color': "lightcoral"}
                ],
            }
        ))
        st.plotly_chart(fig)
        download_plotly_fig(fig, "–ö–æ–Ω—Ñ–ª–∏–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç (%)")


# ---------------------------
# –ë–û–ö–û–í–ê–Ø –ü–ê–ù–ï–õ–¨ (–§–ò–õ–¨–¢–†–ê–¶–ò–Ø)
# ---------------------------
def sidebar_layout(df: pd.DataFrame):
    st.sidebar.title("–§–∏–ª—å—Ç—Ä—ã")

    campuses = df["–ö–∞–º–ø—É—Å"].dropna().unique().tolist()
    categories = df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞"].dropna().unique().tolist()
    education_levels = df["–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"].dropna().unique().tolist()

    selected_campus = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–º–ø—É—Å", campuses, default=campuses)
    selected_category = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–ø—Ä–æ—Å–∞", categories, default=categories)
    selected_edu_level = st.sidebar.multiselect("–í—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", education_levels,
                                                default=education_levels)

    st.sidebar.subheader("–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    # –ö–Ω–æ–ø–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è JSON
    download_json(df.to_dict(orient="records"))

    filtered_df = df[
        (df["–ö–∞–º–ø—É—Å"].isin(selected_campus)) &
        (df["–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞"].isin(selected_category)) &
        (df["–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è"].isin(selected_edu_level))
        ]
    return filtered_df


# ---------------------------
# –û–°–ù–û–í–ù–û–ô –ë–õ–û–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
# ---------------------------
def main():
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data = load_data("logs.json")
    df = process_data(data)

    # 2. –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å (—Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è + —ç–∫—Å–ø–æ—Ä—Ç)
    filtered_df = sidebar_layout(df)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö
    if filtered_df.empty:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã.")
        return

    # 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–æ–≤
    graphs = Plots(filtered_df)

    # 4. –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("<h1 style='text-align: center;'>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞—á–µ—Å—Ç–≤–∞ —á–∞—Ç-–±–æ—Ç–∞</h1>", unsafe_allow_html=True)

    # 5. –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    col1, col2 = st.columns(2)
    with col1:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_pie_chart("–ö–∞–º–ø—É—Å", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
    with col2:
        st.subheader("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")
        graphs.plot_pie_chart("–£—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ —É—Ä–æ–≤–Ω—è–º –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è")

    st.subheader("–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤")
    graphs.plot_bar_chart("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–∞", "–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ")

    col3, col4 = st.columns(2)
    with col3:
        st.subheader("–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø–æ –∫–∞–º–ø—É—Å–∞–º")
        graphs.plot_response_time_chart_with_campus()
    with col4:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞")
        graphs.plot_response_time_chart_line()

    st.subheader("–ß–∞—Å—Ç–æ—Ç–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤")
    graphs.plot_follow_up_pie_chart()

    st.subheader("–ú–µ—Ç—Ä–∏–∫–∞ —É–±–µ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ, –Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞")
    graphs.plot_conflict_metric()


# ---------------------------
# –ó–ê–ü–£–°–ö
# ---------------------------
if __name__ == "__main__":
    main()
